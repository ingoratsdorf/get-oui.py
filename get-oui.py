# Original copyright 2006-2025 Roy Hills
#
# Modified by Ingo Ratsdorf
# to use Python instaed of Perl. Not too many people have Perl installed any more ;-)
#
# You should have received a copy of the GNU General Public License
# along with arp-scan.  If not, see <http://www.gnu.org/licenses/>.
#
# get-oui -- Fetch the MAC/Vendor registry data from the IEEE website
#
# Original author: Roy Hills
# Date: 16 March 2006
# Rewritten by Ingo Ratsdorf in 2025 in Python
#
# This script downloads the Ethernet MAC/Vendor registry data from the
# IEEE website, and converts it to the format used by arp-scan.

import os
import sys
import time
import csv
import requests

# Use the file:// URLs to use the data from the debian ieee-data package.
# Use the http:// URLs to use the data from the IEEE website.
#
# The entries will be written to the output in alphabetical key order, not
# the order they are listed in the hash.

IEEE_REG_URLS = {
    "OUI": "https://standards-oui.ieee.org/oui/oui.csv",
    "MAM": "https://standards-oui.ieee.org/oui28/mam.csv",
    "OUI36": "https://standards-oui.ieee.org/oui36/oui36.csv",
    "IAB": "https://standards-oui.ieee.org/iab/iab.csv"
}

DEFAULT_FILENAME = "ieee-oui.txt"

def fetch_and_parse_ieee_data(filename, verbose=False):
    # If the output filename already exists, rename it to filename.bak before
    # we create the new output file.
    if os.path.exists(filename):
        if verbose:
            print(f"Renaming {filename} to {filename}.bak")
        os.rename(filename, f"{filename}.bak")

    # Open the output file for writing.
    with open(filename, "w", encoding="utf-8") as output:
        # Write the header comments to the output file.
        header = generate_header()
        output.write(header)

        total_entries = 0
        for key, url in sorted(IEEE_REG_URLS.items()):
            if verbose:
                print(f"Processing IEEE {key} registry data from {url}")

            # Set the HTTP User Agent to mimic Chrome on Windows 10/X64 because the IEEE
            # site rejects requests with the default libwww-perl UA string.
            # See https://github.com/royhills/arp-scan/issues/165
            response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
            response.raise_for_status()
            
            content = response.text
            if not content:
                raise Exception(f"Zero-sized response from {url}")

            lines = content.split("\n")
            reader = csv.reader(lines)
            next(reader)  # Skip header
            
            output.write(f"\n#\n# Start of IEEE {key} registry data\n#\n")
            entry_count = 0

            # Parse content and write MAC and Vendor fields to output file.
            for row in reader:
                if len(row) < 3:
                    continue

                # Remove leading and trailing whitespace
                mac_prefix = row[1].strip()
                vendor = row[2].strip()
                output.write(f"{mac_prefix}\t{vendor}\n")
                entry_count += 1
            
            output.write(f"#\n# End of IEEE {key} registry data. {entry_count} entries.\n#\n")
            total_entries += entry_count
            
            if verbose:
                print(f"\t{entry_count} {key} entries written to {filename}")

        # All done.  Close the output file and print OUI entry count
        if verbose:
            print(f"\nTotal of {total_entries} MAC/Vendor mappings written to {filename}")

def generate_header():
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    return f"""# ieee-oui.txt -- IEEE Ethernet OUI-Vendor mapping file for arp-scan
#
# This file contains the IEEE Ethernet MAC address registry entries that are
# used to determine the Ethernet vendor for a given MAC address.
#
# Each line of this file contains an OUI-vendor mapping in the form:
#
# <MAC-Prefix><TAB><Vendor>
#
# This file was automatically generated by get-oui at {timestamp}
#
# Do not edit this file. If you want to add additional MAC-Vendor mappings,
# edit the file mac-vendor.txt instead.
#
"""

if __name__ == "__main__":
    verbose_mode = "-v" in sys.argv
    filename = DEFAULT_FILENAME
    if "-f" in sys.argv:
        idx = sys.argv.index("-f") + 1
        if idx < len(sys.argv):
            filename = sys.argv[idx]
    
    fetch_and_parse_ieee_data(filename, verbose_mode)
